{"sourcetype_builder": {"ar:search": {"metadata": {"data_input_name": null, "extractions_count": 0, "event_count": 0, "cims_count": 0}}}, "alert_action_builder": {"modular_alerts": [{"uuid": "2daac2e47a414d89bd8a96cb9d2fa396", "code": "\n# encoding = utf-8\n\ndef process_event(helper, *args, **kwargs):\n    \"\"\"\n    # IMPORTANT\n    # Do not remove the anchor macro:start and macro:end lines.\n    # These lines are used to generate sample code. If they are\n    # removed, the sample code will not be updated when configurations\n    # are updated.\n\n    [sample_code_macro:start]\n\n    # The following example gets the alert action parameters and prints them to the log\n    splunk_search = helper.get_param(\"splunk_search\")\n    helper.log_info(\"splunk_search={}\".format(splunk_search))\n\n    search_description = helper.get_param(\"search_description\")\n    helper.log_info(\"search_description={}\".format(search_description))\n\n    index = helper.get_param(\"index\")\n    helper.log_info(\"index={}\".format(index))\n\n    search_timeout = helper.get_param(\"search_timeout\")\n    helper.log_info(\"search_timeout={}\".format(search_timeout))\n\n    host = helper.get_param(\"host\")\n    helper.log_info(\"host={}\".format(host))\n\n\n    # The following example adds two sample events (\"hello\", \"world\")\n    # and writes them to Splunk\n    # NOTE: Call helper.writeevents() only once after all events\n    # have been added\n    helper.addevent(\"hello\", sourcetype=\"splunk_search\")\n    helper.addevent(\"world\", sourcetype=\"splunk_search\")\n    helper.writeevents(index=\"summary\", host=\"localhost\", source=\"localhost\")\n\n    # The following example gets the events that trigger the alert\n    events = helper.get_events()\n    for event in events:\n        helper.log_info(\"event={}\".format(event))\n\n    # helper.settings is a dict that includes environment configuration\n    # Example usage: helper.settings[\"server_uri\"]\n    helper.log_info(\"server_uri={}\".format(helper.settings[\"server_uri\"]))\n    [sample_code_macro:end]\n    \"\"\"\n\n    helper.log_info(\"Alert action splunk_search started.\")\n    import splunk.rest\n    import json\n    import time\n    import re\n    from datetime import datetime\n    \n    search_timeout = helper.get_param(\"search_timeout\")\n    splunk_search = helper.get_param(\"splunk_search\")\n    search_description = helper.get_param(\"search_description\")\n    index_name = helper.get_param(\"index\")\n    host_name = helper.get_param(\"host\")\n    \n    #Check Splunk Search does not have single quotes\n    pattern=re.compile(\"\\'\")\n    if pattern.match(splunk_search):\n            helper.log_error('Single quote detected in Splunk search string, use double quotes instead')\n    \n    runSearch = \"/servicesNS/nobody/TA-splunk-search-ar/search/jobs?output_mode=json&count=-1\"\n    pollSearch = \"/servicesNS/nobody/TA-splunk-search-ar/search/jobs/\"\n    \n    helper.log_info(\"Executing searches\")\n    for single_search in splunk_search.split(\"#\"):\n        pdata = {}\n        \n        #Checks to see if earliest has been set in search field\n        if \"earliest\" not in single_search:\n            helper.log_info(\"Earliest time not specified in search \" + str(single_search) + \", defaulting to last 24 hours\")\n            pdata = {'earliest_time' : '-24h', 'search': single_search}\n        else:\n            #add this to our post data for the splunk search\n            helper.log_info(\"Earliest time has been specified in search  \" + str(single_search) + \", using earliest from search\")\n            pdata = {'search': single_search}\n        \n        #make the search request to the Splunk REST endpoint\n        head, content = splunk.rest.simpleRequest(runSearch, sessionKey=helper.settings[\"session_key\"], postargs=pdata, method='POST')\n        \n        #get our search ID/sid\n        data = json.loads(content)\n        \n        #Check current time to create a timer.\n        current_time = 0\n        \n        #Set isDone to False to allow us to move over.\n        isDone = False\n        \n        #Log that search has started.\n        helper.log_info(\"Search of '\" + single_search + \"' has started\")\n        \n        #poll the search endpoint until the search is done\n        while not isDone:\n            head, content = splunk.rest.simpleRequest(pollSearch + data['sid'] + \"?output_mode=json\", sessionKey=helper.settings[\"session_key\"], method='GET')\n            #Put the content variable into a dictionary\n            \n            status = json.loads(content)\n            #Check to see if job is done\n            if status['entry'][0]['content']['isDone']:\n                \n                helper.log_info(\"Search of '\" + single_search + \"' has completed\")\n                isDone = True\n            else:\n                time.sleep(1)\n\n            current_time += 1\n            \n            #Check to see if the search is timed out\n            if current_time > search_timeout:\n                helper.log_info(\"Timed out waiting for search of '\" + single_search + \"' to complete\")\n                break\n        \n        head, content = splunk.rest.simpleRequest(pollSearch + data['sid'] + \"/results?output_mode=json\", sessionKey=helper.settings[\"session_key\"], method='GET')\n        \n        #Create Search Data Dictionary\n        search_data = {}\n        \n        #Get the total event count\n        eventcount = int(status['entry'][0]['content']['eventCount'])\n       \n        #Get the earliest time and latest time of event for recording purposes\n        earliest = status['entry'][0]['content']['earliestTime']\n        \n        if \"latestTime\" in status['entry'][0]['content']:\n            latest = status['entry'][0]['content']['latestTime']\n        \n        else:\n            latest = datetime.now().strftime('%Y-%m-%dT%H:%M:%S.%L%z')\n        \n        #Load the results from json array into dictionary\n        contextual_search_data = json.loads(content)\n        \n        #Specify a description field\n        contextual_search_data['description'] = search_description\n        \n        #Create Description Field\n        search_data['description'] = search_description\n        \n        #Create Search Field\n        search_data['search'] = single_search\n        \n        #Specify latest time\n        search_data['earliest'] = earliest\n        #Write the latest time in the search results\n        search_data['latest'] = str(latest)\n        \n        #Check to see if there is any results field and if not create an empty one\n        if contextual_search_data['results']:\n            search_data['results'] = contextual_search_data['results']\n        else:\n            search_data['results'] = \"None\"\n        \n        #Check to see if there is any messages field and if not create an empty one    \n        if contextual_search_data['messages']:\n            search_data['messages'] = contextual_search_data['messages']\n        else:\n            search_data['messages'] = \"None\"\n        #If there are no events in the results log a message    \n        if eventcount == 0:\n            helper.log_info(\"Search of '\" + str(single_search) + \"' returned \" + str(eventcount) + \" results\") \n       \n        json_results = json.dumps(search_data)\n        \n        #Add event to output\n        helper.addevent(str(json_results), sourcetype=\"ar:search\")\n    \n    #Write results to adaptive index.    \n    helper.writeevents(index=index_name, host=host_name, source=\"adaptive_response_search\")\n    \n        # TODO: Implement your alert action logic here\n        \n", "largeIcon": "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", "label": "splunk_search", "active_response": {"category": ["Information Gathering"], "sourcetype": "splunk_search", "task": ["create"], "supports_adhoc": true, "subject": ["splunk.event"], "technology": [{"product": "Enterprise Security", "version": ["1.0"], "vendor": "Splunk"}], "drilldown_uri": ""}, "parameters": [{"type": "", "label": "Splunk Search", "format_type": "text", "help_string": "Enter your Splunk Search. Eg \"search index=_internal | stats count by host", "value": "| tstats count where index=_internal by sourcetype", "required": true, "name": "splunk_search", "default_value": ""}, {"type": "", "label": "Search Description", "format_type": "text", "help_string": "Use this field to describe what and why you are searching.", "value": "Splunk Adaptive Response", "required": true, "name": "search_description", "default_value": "Splunk Adaptive Response Search"}, {"type": "", "label": "Index", "format_type": "text", "help_string": "Index name to store results", "value": "adaptive", "required": false, "name": "index", "default_value": "main"}, {"type": "", "label": "Search timeout", "format_type": "text", "help_string": "Timeout in seconds before search will stop", "value": "120", "required": true, "name": "search_timeout", "default_value": "120"}, {"type": "", "label": "Host", "format_type": "text", "help_string": "This is the host that Splunk will store as the indexed host name.", "value": "splunk_ar", "required": true, "name": "host", "default_value": "splunk_ar"}], "description": "Executes a Splunk Search", "smallIcon": "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", "short_name": "splunk_search"}]}, "field_extraction_builder": {"ar:search": {"data_format": "unstructured_data"}}, "basic_builder": {"tab_version": "2.2.0", "build_no": 2, "version": "1.0.0", "visible": true, "theme": "#65A637", "appname": "TA-search_splunk", "large_icon": "iVBORw0KGgoAAAANSUhEUgAAAEgAAABICAYAAABV7bNHAAALJElEQVR4Xu2bZYgcSxSFb9zd3d3diLu7u4cocYcE4u4h7h7iQtyJe4i7u7s+voJaemZnM90zPY/sMvfP2nR11akr556qDfXnz58/4rcgEQjlB+jv3uEHyE30+AHyA+RdgvV7UEjwoDt37sjFixfl7du3Ei1aNMmcObNkyJDBO9cw+fQ/7UGXLl2Sjh07yqFDhwItJ3v27DJ16lQpVqyYyaV69rH/DaCfP3/K4cOH5ezZs3L37l358OGDhAsXTuLHjy8ZM2aUokWLSvLkyQNWsXTpUmnRooX8+vVLUqRIIa1atZKUKVPK48ePZcmSJXL58mUJFSqUjBgxQvr16+fZ6k085VOAPn78KH379pWNGzfKkydP5Pfv33+dEgsdOXKkHDx4UIoXLy6hQ4eWHTt2SKlSpdT3Rrtw4YLkyZNHAB4wGzdubGK51j/iE4C+fPmiJn/t2rUAUMKGDSvNmzeXWrVqSYECBYSfsZcvX8q+fftk1apVMm3aNJVbokaNKp8+fRJCLEuWLEGu6tGjR8rrAN5XDYGtALGbnTp1ktmzZ6tFkVBHjx4tHTp0UOFgxsaPHy+9evVSz8ycOdPhkQEDBqifCSttgNqlSxcF/sKFC828wtJnbAOI3cydO7c8f/5cYsWKJXPmzJHatWtbmgwfLliwoBw/ftylR0SJEkWNh3cZLXLkyBIpUiR59eqV5fe5e8AWgI4dOyaFChVS72rWrJnMmzcvIITcTcD57zFjxpR3795ZAihp0qRqY75//271dW4/7zVA5I9y5cqpPIDXUG1cGV6xdu1aVcmuX7+uQGDnySF4zdy5c9VjYcKEUQn5x48f6mcqFuHG+F+/flW/ixgxovrMrFmzpEmTJpIuXTq5efOmT/KQVwCxUMIKl9+2bZtUrFgxEDZbt26V3r17y5UrV/66WzrJOnvQ+vXrlVcC0OfPn9UYAAtAgFejRg35Jz0Id4afPH36VNasWSN16tRxAAAPqFy5suzatUv9nkVMnDhRAQr3wQsY4/Xr12rh6dOnV5/Lnz+/nDx50lKIARjjMZbd5rEHNWrUSFasWKGYLpXEuUrFjh1b3rx5oyrZqVOnVBiYqWRjxoxR3Klbt24yadIkh/W6StKEGSEID4IP2W0eAUT+IBSSJEkiDx48cFg4ngM4kMSqVavKpk2bLM85KB4EicT69++vvv6zPAjKf+/ePdm9e7eULl06AADyRJEiRYSqVrduXVm9erVlcHjADJOmeSVc4V7Lli0TPNoXZtmD6KzTpEmjqg89ldEgai1bthQayfPnz7ucLzkLhv3+/XvVaMaIEcPl56hq7du3V8mZ90FAU6dOrbwGIsr4hOzgwYNl6NChvsBGjWkZIGJ9+fLlisyRULVRggktnXijR4/uMGkqXteuXVVvpa179+4yYcKEIBdHYwtIJG1no8GdPHmyohi+NEsA0VkDArvv3PssWrRIdd+0Fn369HGYs24f+CV5i7JNz1WtWjXFut1ZsNGD2FHivmbNmrJu3TqHdVFqXXkPodKuXTtFAOE0cCW+t8sIQTYO6cQXZsmDdEk9ffq0Aspo5ANkiT179gT8GvqPx5BIyT0JEiTweA3fvn2TCBEiBHq+RIkScuTIkQDm7fELgnjQEkDQeioGEkWcOHEChiSvVKhQQeUT8oo2OBIdeVAs28pi2ICyZcvKzp07HR6rXr26ohL/hNyRLVs2pdHAfOmetVFhZsyYIYhYfAYj3Njx8OHDq1ZE6z9WQHH20FSpUsnt27cdhiDfjR07Vh4+fKi81W6z5EGUZBI0MW9U+LREAUnUQDx79kwSJkwobdu2DdCHvJk8HgSThoAaDQ/FU/EsPMxuswQQyZWJklOMRhvBzgKcNogkhJK8RZL21mDu6NjGdzAm7UXTpk2VIlmvXj1vXxPoeUsAETJ4CZM09lW6wQQ4XaFoHCF4NKt58+b1euKMy/t1R68HnD9/vrRu3Vrp3tAGu80SQMQ4pwrkF2NZbdOmjRLJkDQgcL4wNiRZsmRy//59h+Hpz5Biz5w5I7ly5bL91ZYAoowjkNGsGpkyVYRqwjlV586dbZ8kAwIQrcmBAwccxoecQlKN+c/OCVgCiC561KhRqh9KnDixwzxYAKV++/btds5PjaUlXTxl+PDhDuMXLlxYjh49+m+UedTBKlWqqB6IvspoOuSockYKYAdamTJlkqtXryppBeFNGywaaYQ+0N2Zm6fzsORBL168UGw4bty4SiQ3GuEFaIhn8CK7DFLKO1EhOXw0Gk0sBcJXYpkKbas3zHLkyKEIoXPMQwZ148klA3ozO4ywhanjvZUqVXIYkvMwNuTGjRuSNm1aO14XaAzLAMGY8RBKqz6J0KNqL3KVTD2ZPbIK3gGfoqM3GuWeQkE4I+16y9SDmp9lgOBAMGq+km+M5R4eBOdBzAJEdtdTo6XJmTOneo+rRhe9WutJxv7P0/fZBhADDRkyRKl4qIcQNaNBAahw7DBnZPAjq7Z3714lhAHO5s2bVWFwNlodwpi8aHdRML7LsgfxMJ0zE6S0Q9DYaaNxeUHnoESJEqmDQqqNO2PcBg0aBGjZtBFozc6nIRDCc+fOqbDiwJDjJ1+ZRwAxGSZGD8buUWmckzJsO1++fCqhY3Ti5BSURJpOFoeHUKJJ6gMHDlQHgRi5BXEODdrZkFR69uypwhxvBTx4GRvhC/MYICYDcYPqI+DfunXLZaJEP+Kci0W4M0BGc5o+fbrLsejrCD16Mrp6GmEqGZ7nrSBnaw7SgzEx8gOCGPd4Tpw4EWR5R45YsGCB8igIH7SAhcJvOFWl0USgD0o65fny5curv+Nd+t4QzHrQoEEqhCGTdmtCXnkQQBEmZcqUkf3796vunbMyyrKdpsMKcOBEJUuWdBgegACK4kBO9EbadZ631wDpAdFkSKrkpGHDhkmPHj28xgi2TtKmQebsnZsh3FxzZeQwLlaRsLm/aBdRtQ0gwo3rLfXr11c5AVefMmWKunJn1fDKhg0bKo2HZE84cdP1b0dE9GI005zt0wpR/u0w2wDSk6HEI8Hq6sXOk19QAahkQRkLRBVEY0Zz0s0nYUW1MsN12Bjkj8WLF0u8ePEC9YueAGY7QHoSEEX0I3KCvgxlnCAJGu9wPo2gbBMeVDKexQsBiaRu9uyLnMjxEzSEcPOmDfEZQEYwtmzZoq6ywJ3wBryMtgQwAIorMhwjEY60DcZQ0rkNj+AugNncosU9zu/Qk8yC67Mk7Yn7mn2GfLRy5UpBF+JOAIC6M0KUE2DUTkDijpKZ+0nBEiAmzYkFN9moYpykujpldV4cXsotNzgUyiOJ3vlCujug/5cQczcJM39nsdw52rBhgwIJjzBjPAc4iGsQTUitFZCCDUCAQVKn1UC4p8+DuZsxaAN3lkjYVFRANhtuwQogwKAikovo/bjdBnM3YzyXNWtWpSxYuRoY7ADSYHBGxnk8OYZEbCZs8CTO7aimri6JugI62AKER3BRgut8Vu5DGhVRuJq7UAu2ALHbLBDxjLCBL8GgzRiXHAhNej341d8sWAPEwtCFCBv0JnRwDg7ceQUNLeEJYeV6TogGSHsSEgsNKmdzsPagQNKnw4Dq7t8jGDvYe5DefU5Y0KOQf5Fkx40bF8gxaJgBiN6MoyIzOnmIAQg09JUbNG79750aJe5Wo1gCDie0SCJmLEQBpMONZhdSqf+PBMURMY07Rsi9VgT+EAeQBgnZ1Xhdj5MUNCpXJyUhPkm7WiA9GCe7XI3htJf/WfPEQqQHeQJEUM/4AXKDph8gP0DeBZzfg/we5Pcg7xDwe5B3+P0Huxq2g2I+fIwAAAAASUVORK5CYII=", "friendly_name": "Automatic Search for Splunk", "tab_build_no": "12", "description": "This app allows you to issue single or multiple Splunk searches as an Adaptive Response action.  Fast tracking incident investigation for your team.", "small_icon": "iVBORw0KGgoAAAANSUhEUgAAACQAAAAkCAYAAADhAJiYAAAEIElEQVRYR+1XWSi1XRR+DjImkSgylClDFAoRJUNCEu7cuVBcKClDiVzhQklIypWkhBAuDCXKFKWQIZnnDMk8fj3775zOORzve35D38W3rs7b3metZ6/1rLWfrXh7e3vDX2SKf4AkqvHtGaqtrUVxcTE8PT0xPDwMW1tbvQihN6CDgwMkJydjdXUVNzc3sLGxQUpKClpaWqBQKFBRUYGSkhKcnJzAwcFBfJeWlsoGJRvQwMAAEhMTYWVlhcvLy3cBAgMDUVlZibi4OI01gtSnb2QBMjY2hoeHB5aWlnSeVD3wxMSE2BcREQEeZGZmBuXl5bKyJAnI1NQUra2tSE9PFw7Pz8/h6+uLo6MjVQBmQAmI+x8eHsSaiYkJrq6ukJqaiv7+/q8DCggIQHZ2NnJycoQzEnV9fR3Hx8ews7PTWRr1DEVFRaGtrQ2Ojo5fA/Ty8gIzMzM8Pj4KRy4uLggPDxfOP7LT01NB4qenJ9Xy7u4unJ2dv4dD9vb2YEcZGhqKjoqMjBSZod3d3SEpKUl8Ly4uqgB0dXUhLS1N9c2S3d/fy8qMcpNODqmTlL9fX18FT6qqqlBUVITl5WV4e3vrFUzO5g8Bsa1DQkJEZmhGRkZ4fn4WqTcwMJAsAcu7vb0t/vstbT87OyvAZGZmCqdhYWGYnJwUBM/Ly4OPj8+nh1UHYW1tjYuLCznJ+e8AH12uY2NjYpEdQktISMDg4CAsLS1FGzPgZ6YOiN21v7//NUALCwsYGRlBfn6+cMR2X1tbk+9UbTqzU9kEcu3DDJEvnM4ksr48IM9cXV2/l0PaILy8vNDZ2Qk/Pz/Jg3IWbW1tiQNpH0zyz7o4pCRyXV0dgoODZXcXJzQv19vbWxGbk76jo0OUXK59epepk5OjgB3DScwxoG0NDQ3Izc3VGAn6trzOLlMG4+kYhNqGRk5x+rIUlBqhoaGgIOvu7gbLurKyosJJMNRIWVlZKi7KyZLkbc/WPzs707giSNzGxkZsbm4iJiYG8fHxGrEIZmpqSgxXyo76+nrwrpNjkoDopLq6GoWFhbi+voaFhYVOv729vUI97uzswMnJSbWPoJqamnB4eCiJSRYgpRflQKRY6+vrE2UaGhoSg5PqgFqIZVXqIfXoBDo3N4e9vb1PQekFSOmJTpk1low8ooZWgs3IyMD8/Dw2NjbeBY6NjRWTfnp6Wieo/wVIKu8ExVnEO1HbyElKmtHR0Q/d/AggRgoKCoK5uTnGx8ffBaZs4Wzq6el5t/ZjgBjJ3d0d/v7+oHDTNl4v7e3touTq9qOAGMjNzQ3R0dFobm7WCMwm4KuEsuZXATEYHwTUVjU1NRqDkwOWfPp1QAxILVVQUICysjLRkXxGUbdr24+XTD0gic5HAQWbrjf/rwKSGhdc/wdIKkt/XYb+AOCMUbP/lH6LAAAAAElFTkSuQmCC", "author": "Mickey Perre"}, "validation": {"status": "job_finished", "progress": 1.0, "validators": ["best_practice_validation", "data_model_mapping_validation", "field_extract_validation", "app_cert_validation"], "validation_id": "v_1514076609_56"}}